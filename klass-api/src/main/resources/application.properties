info.build.name=@project.name@
info.build.description=@project.description@
info.build.version=@project.version@
# Application profiles:
#----------------------
# Profiles for production
#   production          = disables test users
#   mariadb             = use remote mariaDB database
#   postgres            = use remote postgres database
#   remote-solr         = use remote Solr server (make sure klass.env.search.solr.url is correct)
#   skip-indexing       = skips indexing classifications for search at startup, (useful when running multiple nodes)
#
# Profiles for development
#   small-import        = imports a small number of classifications from legacy system, useful during development
#   mock-mailserver     = outgoing emails are only logged
#   h2                  = use h2 database (stored on your filesystem)
#   h2-inmemory         = use h2 database but keep everything in memory only.(tests must use h2-inmemory)
#   embedded-postgres   = use embedded postgresql for testing with postgres engine
#   embedded-solr       = run an instance of solr as part of the application (no need to start the solr application)
#   postgres-local      = postgresql database (local container)
#   mariadb-local       = mariadb database (local container)
#----------------------
#-----------------------
#profiles for development (server configuration will override these)
#-----------------------
# Dev. self contained
#spring.profiles.active=api, postgres, skip-indexing, embedded-solr
# Dev. data migrated from sql file
spring.profiles.active=api, postgres-local, skip-indexing, embedded-solr
# Dev. with external dependencies (db and solr)
#spring.profiles.active=api,mariadb,remote-solr,skip-indexing
#-----------------------
# Environment variables
#-----------------------
#Change port for when running multiple local applications
server.port=8080
management.context-path=/manage
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.prometheus.enabled=true

# solr Properties
klass.env.search.solr.url=http://localhost:8983/solr
klass.env.search.solr.core=Klass
# search properties
klass.search.resultsPerPage=10
klass.search.maxDescriptionLength=300
# Logging properties
klass.env.logging.path=.
logging.file.name=${klass.env.logging.path}/klass.log
logging.level.no.ssb.klass=DEBUG
# JSP config (for monitor page)
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
# Mail properties
klass.env.client.klass-mail.url=http://localhost:8082
spring.mail.port=25
spring.mail.host=mail.example.com
spring.mail.properties.mail.from=noreply@example.com
# hibernate config
spring.jpa.properties.hibernate.session_factory.interceptor=no.ssb.klass.core.util.BaseEntityInterceptor
#context path for API docs
klass.env.api.path=/api/klass
# Spring Boot 2.1 disabled bean overriding by default as a defensive approach.
# But we need to override some beans in our tests, so we need to enable it.
spring.main.allow-bean-definition-overriding=true
# Spring MVC 5.3 disabled suffix pattern matching by default as a defensive approach.
# But we need to re-enable this since buttons from ssb.no/klass still uses it
spring.mvc.pathmatch.use-registered-suffix-pattern=true
spring.mvc.pathmatch.matching-strategy:ant-path-matcher
spring.mvc.contentnegotiation.favor-path-extension=true
# Register additional file extensions/media types:
spring.mvc.contentnegotiation.media-types.csv=text/csv
# Required when running behind a load balancer or reverse proxy server
server.forward-headers-strategy=NATIVE
